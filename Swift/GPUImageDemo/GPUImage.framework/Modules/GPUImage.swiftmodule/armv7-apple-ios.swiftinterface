// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.4.2 effective-4.2 (swiftlang-1205.0.28.2 clang-1205.0.19.57)
// swift-module-flags: -target armv7-apple-ios9.0 -enable-objc-interop -enable-library-evolution -swift-version 4.2 -enforce-exclusivity=checked -Onone -module-name GPUImage
import AVFoundation
import Foundation
import Metal
import MetalKit
import MetalPerformanceShaders
import QuartzCore
import Swift
import UIKit
public class PrewittEdgeDetection : GPUImage.TextureSamplingOperation {
  public var edgeStrength: Swift.Float {
    get
    set(value)
  }
  public init()
  override public init(vertexFunctionName: Swift.String? = super, fragmentFunctionName: Swift.String, numberOfInputs: Swift.UInt = super, operationName: Swift.String = #file)
  @objc deinit
}
public class Convolution3x3 : GPUImage.TextureSamplingOperation {
  public var convolutionKernel: GPUImage.Matrix3x3 {
    get
    set(value)
  }
  public init()
  override public init(vertexFunctionName: Swift.String? = super, fragmentFunctionName: Swift.String, numberOfInputs: Swift.UInt = super, operationName: Swift.String = #file)
  @objc deinit
}
extension Matrix3x3 {
  public func toMPSFloatArray() -> [Swift.Float]
}
public class MonochromeFilter : GPUImage.BasicOperation {
  public var intensity: Swift.Float {
    get
    set(value)
  }
  public var color: GPUImage.Color {
    get
    set(value)
  }
  public init()
  override public init(vertexFunctionName: Swift.String? = super, fragmentFunctionName: Swift.String, numberOfInputs: Swift.UInt = super, operationName: Swift.String = #file)
  @objc deinit
}
public class SubtractBlend : GPUImage.BasicOperation {
  public init()
  override public init(vertexFunctionName: Swift.String? = super, fragmentFunctionName: Swift.String, numberOfInputs: Swift.UInt = super, operationName: Swift.String = #file)
  @objc deinit
}
public class StretchDistortion : GPUImage.BasicOperation {
  public var center: GPUImage.Position {
    get
    set(value)
  }
  public init()
  override public init(vertexFunctionName: Swift.String? = super, fragmentFunctionName: Swift.String, numberOfInputs: Swift.UInt = super, operationName: Swift.String = #file)
  @objc deinit
}
public struct Size {
  public let width: Swift.Float
  public let height: Swift.Float
  public init(width: Swift.Float, height: Swift.Float)
}
public class LightenBlend : GPUImage.BasicOperation {
  public init()
  override public init(vertexFunctionName: Swift.String? = super, fragmentFunctionName: Swift.String, numberOfInputs: Swift.UInt = super, operationName: Swift.String = #file)
  @objc deinit
}
public class Luminance : GPUImage.BasicOperation {
  public init()
  override public init(vertexFunctionName: Swift.String? = super, fragmentFunctionName: Swift.String, numberOfInputs: Swift.UInt = super, operationName: Swift.String = #file)
  @objc deinit
}
public typealias PlatformImageType = UIKit.UIImage
public enum PictureFileFormat {
  case png
  case jpeg
  public static func == (a: GPUImage.PictureFileFormat, b: GPUImage.PictureFileFormat) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public class PictureOutput : GPUImage.ImageConsumer {
  public var encodedImageAvailableCallback: ((Foundation.Data) -> ())?
  public var encodedImageFormat: GPUImage.PictureFileFormat
  public var imageAvailableCallback: ((GPUImage.PlatformImageType) -> ())?
  public var onlyCaptureNextFrame: Swift.Bool
  public var keepImageAroundForSynchronousCapture: Swift.Bool
  final public let sources: GPUImage.SourceContainer
  final public let maximumInputs: Swift.UInt
  public init()
  @objc deinit
  public func saveNextFrameToURL(_ url: Foundation.URL, format: GPUImage.PictureFileFormat)
  public func newTextureAvailable(_ texture: GPUImage.Texture, fromSourceIndex: Swift.UInt)
}
extension ImageSource {
  public func saveNextFrameToURL(_ url: Foundation.URL, format: GPUImage.PictureFileFormat)
}
extension UIImage {
  public func filterWithOperation<T>(_ operation: T) -> GPUImage.PlatformImageType where T : GPUImage.ImageProcessingOperation
  public func filterWithPipeline(_ pipeline: (GPUImage.PictureInput, GPUImage.PictureOutput) -> ()) -> GPUImage.PlatformImageType
}
public class SobelEdgeDetection : GPUImage.TextureSamplingOperation {
  public var edgeStrength: Swift.Float {
    get
    set(value)
  }
  public init()
  override public init(vertexFunctionName: Swift.String? = super, fragmentFunctionName: Swift.String, numberOfInputs: Swift.UInt = super, operationName: Swift.String = #file)
  @objc deinit
}
public struct Matrix4x4 {
  public let m11: Swift.Float, m12: Swift.Float, m13: Swift.Float, m14: Swift.Float
  public let m21: Swift.Float, m22: Swift.Float, m23: Swift.Float, m24: Swift.Float
  public let m31: Swift.Float, m32: Swift.Float, m33: Swift.Float, m34: Swift.Float
  public let m41: Swift.Float, m42: Swift.Float, m43: Swift.Float, m44: Swift.Float
  public init(rowMajorValues: [Swift.Float])
  public static var identity: GPUImage.Matrix4x4
}
public struct Matrix3x3 {
  public let m11: Swift.Float, m12: Swift.Float, m13: Swift.Float
  public let m21: Swift.Float, m22: Swift.Float, m23: Swift.Float
  public let m31: Swift.Float, m32: Swift.Float, m33: Swift.Float
  public init(rowMajorValues: [Swift.Float])
  public static var identity: GPUImage.Matrix3x3
  public static var centerOnly: GPUImage.Matrix3x3
}
extension Matrix4x4 {
  public init(_ transform3D: QuartzCore.CATransform3D)
  public init(_ transform: CoreGraphics.CGAffineTransform)
}
public class SoftLightBlend : GPUImage.BasicOperation {
  public init()
  override public init(vertexFunctionName: Swift.String? = super, fragmentFunctionName: Swift.String, numberOfInputs: Swift.UInt = super, operationName: Swift.String = #file)
  @objc deinit
}
public class ThresholdSketchFilter : GPUImage.TextureSamplingOperation {
  public var edgeStrength: Swift.Float {
    get
    set(value)
  }
  public var threshold: Swift.Float {
    get
    set(value)
  }
  public init()
  override public init(vertexFunctionName: Swift.String? = super, fragmentFunctionName: Swift.String, numberOfInputs: Swift.UInt = super, operationName: Swift.String = #file)
  @objc deinit
}
public class NormalBlend : GPUImage.BasicOperation {
  public init()
  override public init(vertexFunctionName: Swift.String? = super, fragmentFunctionName: Swift.String, numberOfInputs: Swift.UInt = super, operationName: Swift.String = #file)
  @objc deinit
}
public class BoxBlur : GPUImage.BasicOperation {
  public var blurRadiusInPixels: Swift.Float {
    get
    set(value)
  }
  public init()
  override public init(vertexFunctionName: Swift.String? = super, fragmentFunctionName: Swift.String, numberOfInputs: Swift.UInt = super, operationName: Swift.String = #file)
  @objc deinit
}
public class LuminosityBlend : GPUImage.BasicOperation {
  public init()
  override public init(vertexFunctionName: Swift.String? = super, fragmentFunctionName: Swift.String, numberOfInputs: Swift.UInt = super, operationName: Swift.String = #file)
  @objc deinit
}
public class LuminanceRangeReduction : GPUImage.BasicOperation {
  public var rangeReductionFactor: Swift.Float {
    get
    set(value)
  }
  public init()
  override public init(vertexFunctionName: Swift.String? = super, fragmentFunctionName: Swift.String, numberOfInputs: Swift.UInt = super, operationName: Swift.String = #file)
  @objc deinit
}
public class LevelsAdjustment : GPUImage.BasicOperation {
  public var minimum: GPUImage.Color {
    get
    set(value)
  }
  public var middle: GPUImage.Color {
    get
    set(value)
  }
  public var maximum: GPUImage.Color {
    get
    set(value)
  }
  public var minOutput: GPUImage.Color {
    get
    set(value)
  }
  public var maxOutput: GPUImage.Color {
    get
    set(value)
  }
  public init()
  override public init(vertexFunctionName: Swift.String? = super, fragmentFunctionName: Swift.String, numberOfInputs: Swift.UInt = super, operationName: Swift.String = #file)
  @objc deinit
}
public class MedianFilter : GPUImage.TextureSamplingOperation {
  public init()
  override public init(vertexFunctionName: Swift.String? = super, fragmentFunctionName: Swift.String, numberOfInputs: Swift.UInt = super, operationName: Swift.String = #file)
  @objc deinit
}
public func defaultVertexFunctionNameForInputs(_ inputCount: Swift.UInt) -> Swift.String
open class BasicOperation : GPUImage.ImageProcessingOperation {
  final public let maximumInputs: Swift.UInt
  final public let targets: GPUImage.TargetContainer
  final public let sources: GPUImage.SourceContainer
  public var activatePassthroughOnNextFrame: Swift.Bool
  public var uniformSettings: GPUImage.ShaderUniformSettings
  public var useMetalPerformanceShaders: Swift.Bool {
    get
    set(value)
  }
  public init(vertexFunctionName: Swift.String? = nil, fragmentFunctionName: Swift.String, numberOfInputs: Swift.UInt = 1, operationName: Swift.String = #file)
  public func transmitPreviousImage(to target: GPUImage.ImageConsumer, atIndex: Swift.UInt)
  public func newTextureAvailable(_ texture: GPUImage.Texture, fromSourceIndex: Swift.UInt)
  @objc deinit
}
public enum ImageOrientation {
  case portrait
  case portraitUpsideDown
  case landscapeLeft
  case landscapeRight
  public static func == (a: GPUImage.ImageOrientation, b: GPUImage.ImageOrientation) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum Rotation {
  case noRotation
  case rotateCounterclockwise
  case rotateClockwise
  case rotate180
  case flipHorizontally
  case flipVertically
  case rotateClockwiseAndFlipVertically
  case rotateClockwiseAndFlipHorizontally
  public static func == (a: GPUImage.Rotation, b: GPUImage.Rotation) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public class HardLightBlend : GPUImage.BasicOperation {
  public init()
  override public init(vertexFunctionName: Swift.String? = super, fragmentFunctionName: Swift.String, numberOfInputs: Swift.UInt = super, operationName: Swift.String = #file)
  @objc deinit
}
@_inheritsConvenienceInitializers open class TextureSamplingOperation : GPUImage.BasicOperation {
  override public init(vertexFunctionName: Swift.String? = "nearbyTexelSampling", fragmentFunctionName: Swift.String, numberOfInputs: Swift.UInt = 1, operationName: Swift.String = #file)
  @objc deinit
}
@_inheritsConvenienceInitializers public class iOSBlur : GPUImage.OperationGroup {
  public var blurRadiusInPixels: Swift.Float {
    get
    set(value)
  }
  public var saturation: Swift.Float {
    get
    set(value)
  }
  public var rangeReductionFactor: Swift.Float {
    get
    set(value)
  }
  override public init()
  @objc deinit
}
public class ColorMatrixFilter : GPUImage.BasicOperation {
  public var intensity: Swift.Float {
    get
    set(value)
  }
  public var colorMatrix: GPUImage.Matrix4x4 {
    get
    set(value)
  }
  public init()
  override public init(vertexFunctionName: Swift.String? = super, fragmentFunctionName: Swift.String, numberOfInputs: Swift.UInt = super, operationName: Swift.String = #file)
  @objc deinit
}
public struct Color {
  public let redComponent: Swift.Float
  public let greenComponent: Swift.Float
  public let blueComponent: Swift.Float
  public let alphaComponent: Swift.Float
  public init(red: Swift.Float, green: Swift.Float, blue: Swift.Float, alpha: Swift.Float = 1.0)
  public static var black: GPUImage.Color
  public static var white: GPUImage.Color
  public static var red: GPUImage.Color
  public static var green: GPUImage.Color
  public static var blue: GPUImage.Color
  public static var transparent: GPUImage.Color
}
public class Crosshatch : GPUImage.BasicOperation {
  public var crossHatchSpacing: Swift.Float {
    get
    set(value)
  }
  public var lineWidth: Swift.Float {
    get
    set(value)
  }
  public init()
  override public init(vertexFunctionName: Swift.String? = super, fragmentFunctionName: Swift.String, numberOfInputs: Swift.UInt = super, operationName: Swift.String = #file)
  @objc deinit
}
@_inheritsConvenienceInitializers public class TiltShift : GPUImage.OperationGroup {
  public var blurRadiusInPixels: Swift.Float {
    get
    set(value)
  }
  public var topFocusLevel: Swift.Float {
    get
    set(value)
  }
  public var bottomFocusLevel: Swift.Float {
    get
    set(value)
  }
  public var focusFallOffRate: Swift.Float {
    get
    set(value)
  }
  override public init()
  @objc deinit
}
public class DarkenBlend : GPUImage.BasicOperation {
  public init()
  override public init(vertexFunctionName: Swift.String? = super, fragmentFunctionName: Swift.String, numberOfInputs: Swift.UInt = super, operationName: Swift.String = #file)
  @objc deinit
}
public struct Position {
  public let x: Swift.Float
  public let y: Swift.Float
  public let z: Swift.Float?
  public init(_ x: Swift.Float, _ y: Swift.Float, _ z: Swift.Float? = nil)
  public static var center: GPUImage.Position
  public static var zero: GPUImage.Position
}
public struct Position2D {
  public let x: Swift.Float
  public let y: Swift.Float
  public init(_ x: Swift.Float, _ y: Swift.Float)
  public static var center: GPUImage.Position
  public static var zero: GPUImage.Position
}
public class SketchFilter : GPUImage.TextureSamplingOperation {
  public var edgeStrength: Swift.Float {
    get
    set(value)
  }
  public init()
  override public init(vertexFunctionName: Swift.String? = super, fragmentFunctionName: Swift.String, numberOfInputs: Swift.UInt = super, operationName: Swift.String = #file)
  @objc deinit
}
public class Laplacian : GPUImage.TextureSamplingOperation {
  public init()
  override public init(vertexFunctionName: Swift.String? = super, fragmentFunctionName: Swift.String, numberOfInputs: Swift.UInt = super, operationName: Swift.String = #file)
  @objc deinit
}
public class ZoomBlur : GPUImage.BasicOperation {
  public var blurSize: Swift.Float {
    get
    set(value)
  }
  public var blurCenter: GPUImage.Position {
    get
    set(value)
  }
  public init()
  override public init(vertexFunctionName: Swift.String? = super, fragmentFunctionName: Swift.String, numberOfInputs: Swift.UInt = super, operationName: Swift.String = #file)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class RenderView : MetalKit.MTKView, GPUImage.ImageConsumer {
  final public let sources: GPUImage.SourceContainer
  final public let maximumInputs: Swift.UInt
  @objc override dynamic public init(frame frameRect: CoreGraphics.CGRect, device: Metal.MTLDevice?)
  @objc required dynamic public init(coder: Foundation.NSCoder)
  public func newTextureAvailable(_ texture: GPUImage.Texture, fromSourceIndex: Swift.UInt)
  @objc override dynamic public func draw(_ rect: CoreGraphics.CGRect)
  @objc deinit
}
public class GaussianBlur : GPUImage.BasicOperation {
  public var blurRadiusInPixels: Swift.Float {
    get
    set(value)
  }
  public init()
  override public init(vertexFunctionName: Swift.String? = super, fragmentFunctionName: Swift.String, numberOfInputs: Swift.UInt = super, operationName: Swift.String = #file)
  @objc deinit
}
public class SourceOverBlend : GPUImage.BasicOperation {
  public init()
  override public init(vertexFunctionName: Swift.String? = super, fragmentFunctionName: Swift.String, numberOfInputs: Swift.UInt = super, operationName: Swift.String = #file)
  @objc deinit
}
public protocol AudioEncodingTarget {
  func activateAudioTrack()
  func processAudioBuffer(_ sampleBuffer: CoreMedia.CMSampleBuffer)
}
public class MovieOutput : GPUImage.ImageConsumer, GPUImage.AudioEncodingTarget {
  final public let sources: GPUImage.SourceContainer
  final public let maximumInputs: Swift.UInt
  public init(URL: Foundation.URL, size: GPUImage.Size, fileType: AVFoundation.AVFileType = AVFileType.mov, liveVideo: Swift.Bool = false, settings: [Swift.String : Swift.AnyObject]? = nil) throws
  public func startRecording(transform: CoreGraphics.CGAffineTransform? = nil)
  public func finishRecording(_ completionCallback: (() -> Swift.Void)? = nil)
  public func newTextureAvailable(_ texture: GPUImage.Texture, fromSourceIndex: Swift.UInt)
  public func activateAudioTrack()
  public func processAudioBuffer(_ sampleBuffer: CoreMedia.CMSampleBuffer)
  @objc deinit
}
public class PinchDistortion : GPUImage.BasicOperation {
  public var radius: Swift.Float {
    get
    set(value)
  }
  public var scale: Swift.Float {
    get
    set(value)
  }
  public var center: GPUImage.Position {
    get
    set(value)
  }
  public init()
  override public init(vertexFunctionName: Swift.String? = super, fragmentFunctionName: Swift.String, numberOfInputs: Swift.UInt = super, operationName: Swift.String = #file)
  @objc deinit
}
@_inheritsConvenienceInitializers public class SepiaToneFilter : GPUImage.ColorMatrixFilter {
  override public init()
  @objc deinit
}
public class SwirlDistortion : GPUImage.BasicOperation {
  public var radius: Swift.Float {
    get
    set(value)
  }
  public var angle: Swift.Float {
    get
    set(value)
  }
  public var center: GPUImage.Position {
    get
    set(value)
  }
  public init()
  override public init(vertexFunctionName: Swift.String? = super, fragmentFunctionName: Swift.String, numberOfInputs: Swift.UInt = super, operationName: Swift.String = #file)
  @objc deinit
}
public class Solarize : GPUImage.BasicOperation {
  public var threshold: Swift.Float {
    get
    set(value)
  }
  public init()
  override public init(vertexFunctionName: Swift.String? = super, fragmentFunctionName: Swift.String, numberOfInputs: Swift.UInt = super, operationName: Swift.String = #file)
  @objc deinit
}
public class MovieInput : GPUImage.ImageSource {
  final public let targets: GPUImage.TargetContainer
  public var runBenchmark: Swift.Bool
  public init(asset: AVFoundation.AVAsset, playAtActualSpeed: Swift.Bool = false, loop: Swift.Bool = false) throws
  public convenience init(url: Foundation.URL, playAtActualSpeed: Swift.Bool = false, loop: Swift.Bool = false) throws
  public func start()
  public func cancel()
  public func transmitPreviousImage(to target: GPUImage.ImageConsumer, atIndex: Swift.UInt)
  @objc deinit
}
extension Timestamp {
  public init(_ time: CoreMedia.CMTime)
  public var asCMTime: CoreMedia.CMTime {
    get
  }
}
public class KuwaharaFilter : GPUImage.BasicOperation {
  public var radius: Swift.Float {
    get
    set(value)
  }
  public init()
  override public init(vertexFunctionName: Swift.String? = super, fragmentFunctionName: Swift.String, numberOfInputs: Swift.UInt = super, operationName: Swift.String = #file)
  @objc deinit
}
public class Haze : GPUImage.BasicOperation {
  public var distance: Swift.Float {
    get
    set(value)
  }
  public var slope: Swift.Float {
    get
    set(value)
  }
  public init()
  override public init(vertexFunctionName: Swift.String? = super, fragmentFunctionName: Swift.String, numberOfInputs: Swift.UInt = super, operationName: Swift.String = #file)
  @objc deinit
}
@_inheritsConvenienceInitializers public class SmoothToonFilter : GPUImage.OperationGroup {
  public var blurRadiusInPixels: Swift.Float {
    get
    set(value)
  }
  public var threshold: Swift.Float {
    get
    set(value)
  }
  public var quantizationLevels: Swift.Float {
    get
    set(value)
  }
  override public init()
  @objc deinit
}
public class ExclusionBlend : GPUImage.BasicOperation {
  public init()
  override public init(vertexFunctionName: Swift.String? = super, fragmentFunctionName: Swift.String, numberOfInputs: Swift.UInt = super, operationName: Swift.String = #file)
  @objc deinit
}
public class LinearBurnBlend : GPUImage.BasicOperation {
  public init()
  override public init(vertexFunctionName: Swift.String? = super, fragmentFunctionName: Swift.String, numberOfInputs: Swift.UInt = super, operationName: Swift.String = #file)
  @objc deinit
}
public class AlphaBlend : GPUImage.BasicOperation {
  public var mix: Swift.Float {
    get
    set(value)
  }
  public init()
  override public init(vertexFunctionName: Swift.String? = super, fragmentFunctionName: Swift.String, numberOfInputs: Swift.UInt = super, operationName: Swift.String = #file)
  @objc deinit
}
public class ChromaKeying : GPUImage.BasicOperation {
  public var thresholdSensitivity: Swift.Float {
    get
    set(value)
  }
  public var smoothing: Swift.Float {
    get
    set(value)
  }
  public var colorToReplace: GPUImage.Color {
    get
    set(value)
  }
  public init()
  override public init(vertexFunctionName: Swift.String? = super, fragmentFunctionName: Swift.String, numberOfInputs: Swift.UInt = super, operationName: Swift.String = #file)
  @objc deinit
}
public class Vibrance : GPUImage.BasicOperation {
  public var vibrance: Swift.Float {
    get
    set(value)
  }
  public init()
  override public init(vertexFunctionName: Swift.String? = super, fragmentFunctionName: Swift.String, numberOfInputs: Swift.UInt = super, operationName: Swift.String = #file)
  @objc deinit
}
public class Posterize : GPUImage.BasicOperation {
  public var colorLevels: Swift.Float {
    get
    set(value)
  }
  public init()
  override public init(vertexFunctionName: Swift.String? = super, fragmentFunctionName: Swift.String, numberOfInputs: Swift.UInt = super, operationName: Swift.String = #file)
  @objc deinit
}
public class SaturationBlend : GPUImage.BasicOperation {
  public init()
  override public init(vertexFunctionName: Swift.String? = super, fragmentFunctionName: Swift.String, numberOfInputs: Swift.UInt = super, operationName: Swift.String = #file)
  @objc deinit
}
@_inheritsConvenienceInitializers public class AmatorkaFilter : GPUImage.LookupFilter {
  override public init()
  @objc deinit
}
public class ColorInversion : GPUImage.BasicOperation {
  public init()
  override public init(vertexFunctionName: Swift.String? = super, fragmentFunctionName: Swift.String, numberOfInputs: Swift.UInt = super, operationName: Swift.String = #file)
  @objc deinit
}
public class HighlightsAndShadows : GPUImage.BasicOperation {
  public var shadows: Swift.Float {
    get
    set(value)
  }
  public var highlights: Swift.Float {
    get
    set(value)
  }
  public init()
  override public init(vertexFunctionName: Swift.String? = super, fragmentFunctionName: Swift.String, numberOfInputs: Swift.UInt = super, operationName: Swift.String = #file)
  @objc deinit
}
public class OverlayBlend : GPUImage.BasicOperation {
  public init()
  override public init(vertexFunctionName: Swift.String? = super, fragmentFunctionName: Swift.String, numberOfInputs: Swift.UInt = super, operationName: Swift.String = #file)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ImageBuffer : GPUImage.ImageProcessingOperation {
  public var bufferSize: Swift.UInt
  public var activatePassthroughOnNextFrame: Swift.Bool
  final public let maximumInputs: Swift.UInt
  final public let targets: GPUImage.TargetContainer
  final public let sources: GPUImage.SourceContainer
  public func newTextureAvailable(_ texture: GPUImage.Texture, fromSourceIndex: Swift.UInt)
  public func transmitPreviousImage(to target: GPUImage.ImageConsumer, atIndex: Swift.UInt)
  @objc deinit
}
@_inheritsConvenienceInitializers public class MissEtikateFilter : GPUImage.LookupFilter {
  override public init()
  @objc deinit
}
public class ColorLocalBinaryPattern : GPUImage.TextureSamplingOperation {
  public init()
  override public init(vertexFunctionName: Swift.String? = super, fragmentFunctionName: Swift.String, numberOfInputs: Swift.UInt = super, operationName: Swift.String = #file)
  @objc deinit
}
public class ChromaKeyBlend : GPUImage.BasicOperation {
  public var thresholdSensitivity: Swift.Float {
    get
    set(value)
  }
  public var smoothing: Swift.Float {
    get
    set(value)
  }
  public var colorToReplace: GPUImage.Color {
    get
    set(value)
  }
  public init()
  override public init(vertexFunctionName: Swift.String? = super, fragmentFunctionName: Swift.String, numberOfInputs: Swift.UInt = super, operationName: Swift.String = #file)
  @objc deinit
}
@_inheritsConvenienceInitializers public class SoftElegance : GPUImage.OperationGroup {
  override public init()
  @objc deinit
}
public struct TimestampFlags : Swift.OptionSet {
  public let rawValue: Swift.UInt32
  public init(rawValue: Swift.UInt32)
  public static var valid: GPUImage.TimestampFlags
  public static var hasBeenRounded: GPUImage.TimestampFlags
  public static var positiveInfinity: GPUImage.TimestampFlags
  public static var negativeInfinity: GPUImage.TimestampFlags
  public static var indefinite: GPUImage.TimestampFlags
  public typealias ArrayLiteralElement = GPUImage.TimestampFlags
  public typealias Element = GPUImage.TimestampFlags
  public typealias RawValue = Swift.UInt32
}
public struct Timestamp : Swift.Comparable {
  public init(value: Swift.Int64, timescale: Swift.Int32, flags: GPUImage.TimestampFlags, epoch: Swift.Int64)
  public static var zero: GPUImage.Timestamp
}
public func == (x: GPUImage.Timestamp, y: GPUImage.Timestamp) -> Swift.Bool
public func < (x: GPUImage.Timestamp, y: GPUImage.Timestamp) -> Swift.Bool
public class MultiplyBlend : GPUImage.BasicOperation {
  public init()
  override public init(vertexFunctionName: Swift.String? = super, fragmentFunctionName: Swift.String, numberOfInputs: Swift.UInt = super, operationName: Swift.String = #file)
  @objc deinit
}
public class AddBlend : GPUImage.BasicOperation {
  public init()
  override public init(vertexFunctionName: Swift.String? = super, fragmentFunctionName: Swift.String, numberOfInputs: Swift.UInt = super, operationName: Swift.String = #file)
  @objc deinit
}
open class OperationGroup : GPUImage.ImageProcessingOperation {
  public var sources: GPUImage.SourceContainer {
    get
  }
  public var targets: GPUImage.TargetContainer {
    get
  }
  final public let maximumInputs: Swift.UInt
  public init()
  public func newTextureAvailable(_ texture: GPUImage.Texture, fromSourceIndex: Swift.UInt)
  public func configureGroup(_ configurationOperation: (GPUImage.ImageRelay, GPUImage.ImageRelay) -> ())
  public func transmitPreviousImage(to target: GPUImage.ImageConsumer, atIndex: Swift.UInt)
  @objc deinit
}
public class Vignette : GPUImage.BasicOperation {
  public var center: GPUImage.Position {
    get
    set(value)
  }
  public var color: GPUImage.Color {
    get
    set(value)
  }
  public var start: Swift.Float {
    get
    set(value)
  }
  public var end: Swift.Float {
    get
    set(value)
  }
  public init()
  override public init(vertexFunctionName: Swift.String? = super, fragmentFunctionName: Swift.String, numberOfInputs: Swift.UInt = super, operationName: Swift.String = #file)
  @objc deinit
}
public class ContrastAdjustment : GPUImage.BasicOperation {
  public var contrast: Swift.Float {
    get
    set(value)
  }
  public init()
  override public init(vertexFunctionName: Swift.String? = super, fragmentFunctionName: Swift.String, numberOfInputs: Swift.UInt = super, operationName: Swift.String = #file)
  @objc deinit
}
public class PolarPixellate : GPUImage.BasicOperation {
  public var pixelSize: GPUImage.Size {
    get
    set(value)
  }
  public var center: GPUImage.Position {
    get
    set(value)
  }
  public init()
  override public init(vertexFunctionName: Swift.String? = super, fragmentFunctionName: Swift.String, numberOfInputs: Swift.UInt = super, operationName: Swift.String = #file)
  @objc deinit
}
@_inheritsConvenienceInitializers public class AdaptiveThreshold : GPUImage.OperationGroup {
  public var blurRadiusInPixels: Swift.Float {
    get
    set(value)
  }
  override public init()
  @objc deinit
}
public class LookupFilter : GPUImage.BasicOperation {
  public var intensity: Swift.Float {
    get
    set(value)
  }
  public var lookupImage: GPUImage.PictureInput? {
    get
    set(value)
  }
  public init()
  override public init(vertexFunctionName: Swift.String? = super, fragmentFunctionName: Swift.String, numberOfInputs: Swift.UInt = super, operationName: Swift.String = #file)
  @objc deinit
}
public var standardImageVertices: [Swift.Float]
public class ExposureAdjustment : GPUImage.BasicOperation {
  public var exposure: Swift.Float {
    get
    set(value)
  }
  public init()
  override public init(vertexFunctionName: Swift.String? = super, fragmentFunctionName: Swift.String, numberOfInputs: Swift.UInt = super, operationName: Swift.String = #file)
  @objc deinit
}
public enum TextureTimingStyle {
  case stillImage
  case videoFrame(timestamp: GPUImage.Timestamp)
  public var timestamp: GPUImage.Timestamp? {
    get
  }
}
public class Texture {
  public var timingStyle: GPUImage.TextureTimingStyle
  public var orientation: GPUImage.ImageOrientation
  final public let texture: Metal.MTLTexture
  public init(orientation: GPUImage.ImageOrientation, texture: Metal.MTLTexture, timingStyle: GPUImage.TextureTimingStyle = .stillImage)
  public init(device: Metal.MTLDevice, orientation: GPUImage.ImageOrientation, pixelFormat: Metal.MTLPixelFormat = .bgra8Unorm, width: Swift.Int, height: Swift.Int, mipmapped: Swift.Bool = false, timingStyle: GPUImage.TextureTimingStyle = .stillImage)
  @objc deinit
}
public class GammaAdjustment : GPUImage.BasicOperation {
  public var gamma: Swift.Float {
    get
    set(value)
  }
  public init()
  override public init(vertexFunctionName: Swift.String? = super, fragmentFunctionName: Swift.String, numberOfInputs: Swift.UInt = super, operationName: Swift.String = #file)
  @objc deinit
}
public protocol CameraDelegate {
  func didCaptureBuffer(_ sampleBuffer: CoreMedia.CMSampleBuffer)
}
public enum PhysicalCameraLocation {
  case backFacing
  case frontFacing
  public static func == (a: GPUImage.PhysicalCameraLocation, b: GPUImage.PhysicalCameraLocation) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct CameraError : Swift.Error {
}
@objc public class Camera : ObjectiveC.NSObject, GPUImage.ImageSource, AVFoundation.AVCaptureVideoDataOutputSampleBufferDelegate {
  public var location: GPUImage.PhysicalCameraLocation {
    get
    set(value)
  }
  public var runBenchmark: Swift.Bool
  public var logFPS: Swift.Bool
  final public let targets: GPUImage.TargetContainer
  public var delegate: GPUImage.CameraDelegate?
  final public let captureSession: AVFoundation.AVCaptureSession
  public var orientation: GPUImage.ImageOrientation?
  final public let inputCamera: AVFoundation.AVCaptureDevice!
  public init(sessionPreset: AVFoundation.AVCaptureSession.Preset, cameraDevice: AVFoundation.AVCaptureDevice? = nil, location: GPUImage.PhysicalCameraLocation = .backFacing, orientation: GPUImage.ImageOrientation? = nil, captureAsYUV: Swift.Bool = true) throws
  @objc deinit
  @objc public func captureOutput(_ output: AVFoundation.AVCaptureOutput, didOutput sampleBuffer: CoreMedia.CMSampleBuffer, from connection: AVFoundation.AVCaptureConnection)
  public func startCapture()
  public func stopCapture()
  public func transmitPreviousImage(to target: GPUImage.ImageConsumer, atIndex: Swift.UInt)
  @objc override dynamic public init()
}
public class HighlightAndShadowTint : GPUImage.BasicOperation {
  public var shadowTintIntensity: Swift.Float {
    get
    set(value)
  }
  public var highlightTintIntensity: Swift.Float {
    get
    set(value)
  }
  public var shadowTintColor: GPUImage.Color {
    get
    set(value)
  }
  public var highlightTintColor: GPUImage.Color {
    get
    set(value)
  }
  public init()
  override public init(vertexFunctionName: Swift.String? = super, fragmentFunctionName: Swift.String, numberOfInputs: Swift.UInt = super, operationName: Swift.String = #file)
  @objc deinit
}
public class ColorDodgeBlend : GPUImage.BasicOperation {
  public init()
  override public init(vertexFunctionName: Swift.String? = super, fragmentFunctionName: Swift.String, numberOfInputs: Swift.UInt = super, operationName: Swift.String = #file)
  @objc deinit
}
public class DifferenceBlend : GPUImage.BasicOperation {
  public init()
  override public init(vertexFunctionName: Swift.String? = super, fragmentFunctionName: Swift.String, numberOfInputs: Swift.UInt = super, operationName: Swift.String = #file)
  @objc deinit
}
public class RGBAdjustment : GPUImage.BasicOperation {
  public var red: Swift.Float {
    get
    set(value)
  }
  public var blue: Swift.Float {
    get
    set(value)
  }
  public var green: Swift.Float {
    get
    set(value)
  }
  public init()
  override public init(vertexFunctionName: Swift.String? = super, fragmentFunctionName: Swift.String, numberOfInputs: Swift.UInt = super, operationName: Swift.String = #file)
  @objc deinit
}
public class DissolveBlend : GPUImage.BasicOperation {
  public var mix: Swift.Float {
    get
    set(value)
  }
  public init()
  override public init(vertexFunctionName: Swift.String? = super, fragmentFunctionName: Swift.String, numberOfInputs: Swift.UInt = super, operationName: Swift.String = #file)
  @objc deinit
}
public var sharedMetalRenderingDevice: GPUImage.MetalRenderingDevice
@_hasMissingDesignatedInitializers public class MetalRenderingDevice {
  final public let device: Metal.MTLDevice
  final public let commandQueue: Metal.MTLCommandQueue
  final public let shaderLibrary: Metal.MTLLibrary
  final public let metalPerformanceShadersAreSupported: Swift.Bool
  @objc deinit
}
public var colorConversionMatrix601Default: GPUImage.Matrix3x3
public var colorConversionMatrix601FullRangeDefault: GPUImage.Matrix3x3
public var colorConversionMatrix709Default: GPUImage.Matrix3x3
public func convertYUVToRGB(pipelineState: Metal.MTLRenderPipelineState, lookupTable: [Swift.String : (Swift.Int, Metal.MTLDataType)], luminanceTexture: GPUImage.Texture, chrominanceTexture: GPUImage.Texture, secondChrominanceTexture: GPUImage.Texture? = nil, resultTexture: GPUImage.Texture, colorConversionMatrix: GPUImage.Matrix3x3)
public class Halftone : GPUImage.BasicOperation {
  public var fractionalWidthOfAPixel: Swift.Float {
    get
    set(value)
  }
  public init()
  override public init(vertexFunctionName: Swift.String? = super, fragmentFunctionName: Swift.String, numberOfInputs: Swift.UInt = super, operationName: Swift.String = #file)
  @objc deinit
}
public class Pixellate : GPUImage.BasicOperation {
  public var fractionalWidthOfAPixel: Swift.Float {
    get
    set(value)
  }
  public init()
  override public init(vertexFunctionName: Swift.String? = super, fragmentFunctionName: Swift.String, numberOfInputs: Swift.UInt = super, operationName: Swift.String = #file)
  @objc deinit
}
public class PictureInput : GPUImage.ImageSource {
  final public let targets: GPUImage.TargetContainer
  public init(image: CoreGraphics.CGImage, smoothlyScaleOutput: Swift.Bool = false, orientation: GPUImage.ImageOrientation = .portrait)
  public convenience init(image: UIKit.UIImage, smoothlyScaleOutput: Swift.Bool = false, orientation: GPUImage.ImageOrientation = .portrait)
  public convenience init(imageName: Swift.String, smoothlyScaleOutput: Swift.Bool = false, orientation: GPUImage.ImageOrientation = .portrait)
  public func processImage(synchronously: Swift.Bool = false)
  public func transmitPreviousImage(to target: GPUImage.ImageConsumer, atIndex: Swift.UInt)
  @objc deinit
}
public class ColorBlend : GPUImage.BasicOperation {
  public init()
  override public init(vertexFunctionName: Swift.String? = super, fragmentFunctionName: Swift.String, numberOfInputs: Swift.UInt = super, operationName: Swift.String = #file)
  @objc deinit
}
public class HueBlend : GPUImage.BasicOperation {
  public init()
  override public init(vertexFunctionName: Swift.String? = super, fragmentFunctionName: Swift.String, numberOfInputs: Swift.UInt = super, operationName: Swift.String = #file)
  @objc deinit
}
@_inheritsConvenienceInitializers public class SolidColorGenerator : GPUImage.ImageGenerator {
  public func renderColor(_ color: GPUImage.Color)
  override public init(size: GPUImage.Size)
  @objc deinit
}
@_inheritsConvenienceInitializers public class LowPassFilter : GPUImage.OperationGroup {
  public var strength: Swift.Float {
    get
    set(value)
  }
  override public init()
  @objc deinit
}
public class ShaderUniformSettings {
  public var colorUniformsUseAlpha: Swift.Bool
  public init(uniformLookupTable: [Swift.String : (Swift.Int, Metal.MTLDataType)])
  public var usesAspectRatio: Swift.Bool {
    get
  }
  public subscript(key: Swift.String) -> Swift.Float {
    get
    set(newValue)
  }
  public subscript(key: Swift.String) -> GPUImage.Color {
    get
    set(newValue)
  }
  public subscript(key: Swift.String) -> GPUImage.Position {
    get
    set(newValue)
  }
  public subscript(key: Swift.String) -> GPUImage.Size {
    get
    set(newValue)
  }
  public subscript(key: Swift.String) -> GPUImage.Matrix3x3 {
    get
    set(newValue)
  }
  public subscript(key: Swift.String) -> GPUImage.Matrix4x4 {
    get
    set(newValue)
  }
  public func restoreShaderSettings(renderEncoder: Metal.MTLRenderCommandEncoder)
  @objc deinit
}
public protocol UniformConvertible {
  func toFloatArray() -> [Swift.Float]
}
extension Float : GPUImage.UniformConvertible {
  public func toFloatArray() -> [Swift.Float]
}
extension Double : GPUImage.UniformConvertible {
  public func toFloatArray() -> [Swift.Float]
}
extension Position : GPUImage.UniformConvertible {
  public func toFloatArray() -> [Swift.Float]
}
extension Matrix3x3 : GPUImage.UniformConvertible {
  public func toFloatArray() -> [Swift.Float]
}
extension Matrix4x4 : GPUImage.UniformConvertible {
  public func toFloatArray() -> [Swift.Float]
}
extension Size : GPUImage.UniformConvertible {
  public func toFloatArray() -> [Swift.Float]
}
public class ScreenBlend : GPUImage.BasicOperation {
  public init()
  override public init(vertexFunctionName: Swift.String? = super, fragmentFunctionName: Swift.String, numberOfInputs: Swift.UInt = super, operationName: Swift.String = #file)
  @objc deinit
}
@_inheritsConvenienceInitializers public class ColourFASTFeatureDetection : GPUImage.OperationGroup {
  public var blurRadiusInPixels: Swift.Float {
    get
    set(value)
  }
  override public init()
  @objc deinit
}
public class ImageGenerator : GPUImage.ImageSource {
  public var size: GPUImage.Size
  final public let targets: GPUImage.TargetContainer
  public init(size: GPUImage.Size)
  public func transmitPreviousImage(to target: GPUImage.ImageConsumer, atIndex: Swift.UInt)
  @objc deinit
}
public class BrightnessAdjustment : GPUImage.BasicOperation {
  public var brightness: Swift.Float {
    get
    set(value)
  }
  public init()
  override public init(vertexFunctionName: Swift.String? = super, fragmentFunctionName: Swift.String, numberOfInputs: Swift.UInt = super, operationName: Swift.String = #file)
  @objc deinit
}
public class SphereRefraction : GPUImage.BasicOperation {
  public var radius: Swift.Float {
    get
    set(value)
  }
  public var refractiveIndex: Swift.Float {
    get
    set(value)
  }
  public var center: GPUImage.Position {
    get
    set(value)
  }
  public init()
  override public init(vertexFunctionName: Swift.String? = super, fragmentFunctionName: Swift.String, numberOfInputs: Swift.UInt = super, operationName: Swift.String = #file)
  @objc deinit
}
public class GlassSphereRefraction : GPUImage.BasicOperation {
  public var radius: Swift.Float {
    get
    set(value)
  }
  public var refractiveIndex: Swift.Float {
    get
    set(value)
  }
  public var center: GPUImage.Position {
    get
    set(value)
  }
  public init()
  override public init(vertexFunctionName: Swift.String? = super, fragmentFunctionName: Swift.String, numberOfInputs: Swift.UInt = super, operationName: Swift.String = #file)
  @objc deinit
}
public class ColorBurnBlend : GPUImage.BasicOperation {
  public init()
  override public init(vertexFunctionName: Swift.String? = super, fragmentFunctionName: Swift.String, numberOfInputs: Swift.UInt = super, operationName: Swift.String = #file)
  @objc deinit
}
public class BulgeDistortion : GPUImage.BasicOperation {
  public var radius: Swift.Float {
    get
    set(value)
  }
  public var scale: Swift.Float {
    get
    set(value)
  }
  public var center: GPUImage.Position {
    get
    set(value)
  }
  public init()
  override public init(vertexFunctionName: Swift.String? = super, fragmentFunctionName: Swift.String, numberOfInputs: Swift.UInt = super, operationName: Swift.String = #file)
  @objc deinit
}
public class PolkaDot : GPUImage.BasicOperation {
  public var dotScaling: Swift.Float {
    get
    set(value)
  }
  public var fractionalWidthOfAPixel: Swift.Float {
    get
    set(value)
  }
  public init()
  override public init(vertexFunctionName: Swift.String? = super, fragmentFunctionName: Swift.String, numberOfInputs: Swift.UInt = super, operationName: Swift.String = #file)
  @objc deinit
}
public class LuminanceThreshold : GPUImage.BasicOperation {
  public var threshold: Swift.Float {
    get
    set(value)
  }
  public init()
  override public init(vertexFunctionName: Swift.String? = super, fragmentFunctionName: Swift.String, numberOfInputs: Swift.UInt = super, operationName: Swift.String = #file)
  @objc deinit
}
@_inheritsConvenienceInitializers public class EmbossFilter : GPUImage.Convolution3x3 {
  public var intensity: Swift.Float {
    get
    set(value)
  }
  override public init()
  @objc deinit
}
public class FalseColor : GPUImage.BasicOperation {
  public var firstColor: GPUImage.Color {
    get
    set(value)
  }
  public var secondColor: GPUImage.Color {
    get
    set(value)
  }
  public init()
  override public init(vertexFunctionName: Swift.String? = super, fragmentFunctionName: Swift.String, numberOfInputs: Swift.UInt = super, operationName: Swift.String = #file)
  @objc deinit
}
public class ThresholdSobelEdgeDetection : GPUImage.TextureSamplingOperation {
  public var edgeStrength: Swift.Float {
    get
    set(value)
  }
  public var threshold: Swift.Float {
    get
    set(value)
  }
  public init()
  override public init(vertexFunctionName: Swift.String? = super, fragmentFunctionName: Swift.String, numberOfInputs: Swift.UInt = super, operationName: Swift.String = #file)
  @objc deinit
}
public class Sharpen : GPUImage.BasicOperation {
  public var sharpness: Swift.Float {
    get
    set(value)
  }
  public var overriddenTexelSize: GPUImage.Size?
  public init()
  override public init(vertexFunctionName: Swift.String? = super, fragmentFunctionName: Swift.String, numberOfInputs: Swift.UInt = super, operationName: Swift.String = #file)
  @objc deinit
}
public class CGAColorspaceFilter : GPUImage.BasicOperation {
  public init()
  override public init(vertexFunctionName: Swift.String? = super, fragmentFunctionName: Swift.String, numberOfInputs: Swift.UInt = super, operationName: Swift.String = #file)
  @objc deinit
}
public class OpacityAdjustment : GPUImage.BasicOperation {
  public var opacity: Swift.Float {
    get
    set(value)
  }
  public init()
  override public init(vertexFunctionName: Swift.String? = super, fragmentFunctionName: Swift.String, numberOfInputs: Swift.UInt = super, operationName: Swift.String = #file)
  @objc deinit
}
public class HueAdjustment : GPUImage.BasicOperation {
  public var hue: Swift.Float {
    get
    set(value)
  }
  public init()
  override public init(vertexFunctionName: Swift.String? = super, fragmentFunctionName: Swift.String, numberOfInputs: Swift.UInt = super, operationName: Swift.String = #file)
  @objc deinit
}
public class SaturationAdjustment : GPUImage.BasicOperation {
  public var saturation: Swift.Float {
    get
    set(value)
  }
  public init()
  override public init(vertexFunctionName: Swift.String? = super, fragmentFunctionName: Swift.String, numberOfInputs: Swift.UInt = super, operationName: Swift.String = #file)
  @objc deinit
}
public class ToonFilter : GPUImage.TextureSamplingOperation {
  public var threshold: Swift.Float {
    get
    set(value)
  }
  public var quantizationLevels: Swift.Float {
    get
    set(value)
  }
  public init()
  override public init(vertexFunctionName: Swift.String? = super, fragmentFunctionName: Swift.String, numberOfInputs: Swift.UInt = super, operationName: Swift.String = #file)
  @objc deinit
}
@_inheritsConvenienceInitializers public class HighPassFilter : GPUImage.OperationGroup {
  public var strength: Swift.Float {
    get
    set(value)
  }
  override public init()
  @objc deinit
}
public class LocalBinaryPattern : GPUImage.TextureSamplingOperation {
  public init()
  override public init(vertexFunctionName: Swift.String? = super, fragmentFunctionName: Swift.String, numberOfInputs: Swift.UInt = super, operationName: Swift.String = #file)
  @objc deinit
}
public class KuwaharaRadius3Filter : GPUImage.BasicOperation {
  public init()
  override public init(vertexFunctionName: Swift.String? = super, fragmentFunctionName: Swift.String, numberOfInputs: Swift.UInt = super, operationName: Swift.String = #file)
  @objc deinit
}
public class DivideBlend : GPUImage.BasicOperation {
  public init()
  override public init(vertexFunctionName: Swift.String? = super, fragmentFunctionName: Swift.String, numberOfInputs: Swift.UInt = super, operationName: Swift.String = #file)
  @objc deinit
}
public protocol ImageSource {
  var targets: GPUImage.TargetContainer { get }
  func transmitPreviousImage(to target: GPUImage.ImageConsumer, atIndex: Swift.UInt)
}
public protocol ImageConsumer : AnyObject {
  var maximumInputs: Swift.UInt { get }
  var sources: GPUImage.SourceContainer { get }
  func newTextureAvailable(_ texture: GPUImage.Texture, fromSourceIndex: Swift.UInt)
}
public protocol ImageProcessingOperation : GPUImage.ImageConsumer, GPUImage.ImageSource {
}
infix operator --> : AdditionPrecedence
@discardableResult
public func --> <T>(source: GPUImage.ImageSource, destination: T) -> T where T : GPUImage.ImageConsumer
extension ImageSource {
  public func addTarget(_ target: GPUImage.ImageConsumer, atTargetIndex: Swift.UInt? = nil)
  public func removeAllTargets()
  public func updateTargetsWithTexture(_ texture: GPUImage.Texture)
}
extension ImageConsumer {
  public func addSource(_ source: GPUImage.ImageSource) -> Swift.UInt?
  public func setSource(_ source: GPUImage.ImageSource, atIndex: Swift.UInt)
  public func removeSourceAtIndex(_ index: Swift.UInt)
}
public class TargetContainer : Swift.Sequence {
  public init()
  public func append(_ target: GPUImage.ImageConsumer, indexAtTarget: Swift.UInt)
  public func makeIterator() -> Swift.AnyIterator<(GPUImage.ImageConsumer, Swift.UInt)>
  public func removeAll()
  public typealias Element = (GPUImage.ImageConsumer, Swift.UInt)
  public typealias Iterator = Swift.AnyIterator<(GPUImage.ImageConsumer, Swift.UInt)>
  @objc deinit
}
public class SourceContainer {
  public init()
  public func append(_ source: GPUImage.ImageSource, maximumInputs: Swift.UInt) -> Swift.UInt?
  public func insert(_ source: GPUImage.ImageSource, atIndex: Swift.UInt, maximumInputs: Swift.UInt) -> Swift.UInt
  public func removeAtIndex(_ index: Swift.UInt)
  @objc deinit
}
public class ImageRelay : GPUImage.ImageProcessingOperation {
  public var newImageCallback: ((GPUImage.Texture) -> ())?
  final public let sources: GPUImage.SourceContainer
  final public let targets: GPUImage.TargetContainer
  final public let maximumInputs: Swift.UInt
  public var preventRelay: Swift.Bool
  public init()
  public func transmitPreviousImage(to target: GPUImage.ImageConsumer, atIndex: Swift.UInt)
  public func newTextureAvailable(_ texture: GPUImage.Texture, fromSourceIndex: Swift.UInt)
  public func relayTextureOnward(_ texture: GPUImage.Texture)
  @objc deinit
}
